#pragma kernel CSMain

RWTexture3D<float> Result;

static const float scale = 6.5;
static const float3 offset = float3(0, 0, 0);

static const uint perm[512] = {
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
    8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,
    35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
    134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,
    55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
    18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
    226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58,
    17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
    155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104,
    218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235,
    249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45,
    127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,
    61, 156, 180,
    // repeat
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,
    8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,
    35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,
    134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,
    55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,
    18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217,
    226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58,
    17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
    155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104,
    218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235,
    249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45,
    127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,
    61, 156, 180
};

float3 fade(float3 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float grad(uint hash, float3 p) {
    uint h = hash & 15;
    float u = (h < 8) ? p.x : p.y;
    float v = (h < 4) ? p.y : ((h == 12 || h == 14) ? p.x : p.z);
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float noise(float3 P) {
    float3 Pi = floor(P);
    float3 Pf = P - Pi;

    uint3 i = uint3(Pi);

    uint xi = i.x & 255;
    uint yi = i.y & 255;
    uint zi = i.z & 255;

    float3 f = fade(Pf);

    uint aaa = perm[perm[perm[xi & 255] + (yi & 255)] + (zi & 255)];
    uint aba = perm[perm[perm[xi & 255] + ((yi + 1) & 255)] + (zi & 255)];
    uint aab = perm[perm[perm[xi & 255] + (yi & 255)] + ((zi + 1) & 255)];
    uint abb = perm[perm[perm[xi & 255] + ((yi + 1) & 255)] + ((zi + 1) & 255)];
    uint baa = perm[perm[perm[(xi + 1) & 255] + (yi & 255)] + (zi & 255)];
    uint bba = perm[perm[perm[(xi + 1) & 255] + ((yi + 1) & 255)] + (zi & 255)];
    uint bab = perm[perm[perm[(xi + 1) & 255] + (yi & 255)] + ((zi + 1) & 255)];
    uint bbb = perm[perm[perm[(xi + 1) & 255] + ((yi + 1) & 255)] + ((zi + 1) & 255)];

    float x0 = lerp(grad(aaa, Pf), grad(baa, Pf - float3(1, 0, 0)), f.x);
    float x1 = lerp(grad(aba, Pf - float3(0, 1, 0)), grad(bba, Pf - float3(1, 1, 0)), f.x);
    float x2 = lerp(grad(aab, Pf - float3(0, 0, 1)), grad(bab, Pf - float3(1, 0, 1)), f.x);
    float x3 = lerp(grad(abb, Pf - float3(0, 1, 1)), grad(bbb, Pf - float3(1, 1, 1)), f.x);

    float y0 = lerp(x0, x1, f.y);
    float y1 = lerp(x2, x3, f.y);
    
   return lerp(y0, y1, f.z);
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    uint width, height, depth;
    Result.GetDimensions(width, height, depth);

    if (id.x >= width || id.y >= height || id.z >= depth) {
        return;
    }

    float3 uvw = float3(id.x, id.y, id.z) / float3(width, height, depth) * scale + offset;
    
    float n = (noise(uvw) + 1.0) * 0.5f;
    Result[id] = n;
}
