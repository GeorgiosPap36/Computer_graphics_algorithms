// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> Result;

const float radius = 0.75f;

float SphereNoise(float3 uv) {
    
    return length(uv) - radius;
}


[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    
    uint width, height, depth;
    Result.GetDimensions(width, height, depth);
    
    // Normalize the id coordinates based 
    // on the width and height of the texture
    // * 2 - 1 so that (0, 0) is in the center
    float3 uv = id.xyz / float3(width, height, depth);
    uv = uv * 2 - 1;
    
    float n = SphereNoise(uv);
    
    Result[id.xyz] = float4(n, n, n, 1.0);
}
